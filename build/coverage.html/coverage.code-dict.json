{"/home/travis/build/npmtest/node-npmtest-generator-angulpify/test.js":"/* istanbul instrument in package npmtest_generator_angulpify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angulpify/lib.npmtest_generator_angulpify.js":"/* istanbul instrument in package npmtest_generator_angulpify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_angulpify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_angulpify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angulpify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-angulpify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_angulpify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_angulpify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_angulpify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_angulpify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_angulpify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_angulpify.__dirname + '/lib.npmtest_generator_angulpify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angulpify/node_modules/generator-angulpify/generators/app/index.js":"'use strict';\n\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar chalk = require('chalk');\n\nvar AngulpifyGenerator = module.exports = yeoman.generators.Base.extend({\n  constructor: function () {\n    yeoman.generators.Base.apply(this, arguments);\n    this.option('skip-welcome-message', {desc: 'Skip the welcome message'});\n    this.option('skip-install', {desc: 'Skip the bower and node installations'});\n    this.option('skip-install-message', {desc: 'Skip the bower and node installations commands'});\n  },\n  initializing: function () {},\n  prompting: function () {\n    var done = this.async();\n    if (!this.options['skip-welcome-message']) {\n      var welcomeMessage = 'Out of the box I include '+ chalk.red('AngularJS')+', '+chalk.red('Gulp')+' and '+chalk.red('Browserify')+' to build your app.';\n      this.log(yosay(welcomeMessage));\n    }\n    var prompts = [\n      {\n        type: 'input',\n        name: 'projectName',\n        message: 'What\\'s your project name?',\n        default: this.appname\n      },\n      {\n        type: 'list',\n        name: 'language',\n        message: 'Would you like to use a language other than JavaScript?',\n        choices: [\n          {\n            name: 'CoffeeScript',\n            value: 'includeCoffeeScript'\n          },\n          {\n            name: 'TypeScript',\n            value: 'includeTypeScript'\n          },\n          {\n            name: 'JavaScript is all I need',\n            value: 'includeJavaScript'\n          }\n        ],\n        default: 2\n      },\n      {\n        type: 'list',\n        name: 'preprocessor',\n        message: 'Would you like to use a preprocessor?',\n        choices: [\n          {\n            name: 'Less',\n            value: 'includeLess'\n          },\n          {\n            name: 'Sass',\n            value: 'includeSass'\n          },\n          {\n            name: 'CSS is just fine',\n            value: 'includeHtml'\n          }\n        ],\n        default: 2\n      },\n      {\n        type: 'list',\n        name: 'templateEngine',\n        message: 'Would you like to use a template engine?',\n        choices: [\n          {\n            name: 'Jade',\n            value: 'includeJade'\n          },\n          {\n            name: 'HTML is enough',\n            value: 'includeHtml'\n          }\n        ],\n        default: 1\n      },\n      {\n        type: 'checkbox',\n        name: 'goodies',\n        message: 'I promess it\\'s the last one, what more would you like?',\n        choices: [\n          {\n            name: 'Bootstrap',\n            value: 'includeBootstrap',\n            checked: true\n          },\n          {\n            name: 'UI Bootstrap',\n            value: 'includeUIBootstrap',\n            checked: true\n          },\n          {\n            name: 'UI Router',\n            value: 'includeUIRouter',\n            checked: true\n          }\n        ]\n      }\n    ];\n\n    this.prompt(prompts, function (answers) {\n      var features = [answers.language].concat([answers.preprocessor], [answers.templateEngine], answers.goodies);\n      var hasFeature = function (feature) {\n        return features.indexOf(feature) !== -1;\n      };\n\n      this.appname = answers.projectName;\n\n      this.includeCoffeeScript = hasFeature('includeCoffeeScript');\n      this.includeTypeScript = hasFeature('includeTypeScript');\n      this.includeJavaScript = hasFeature('includeJavaScript');\n\n      this.includeLess = hasFeature('includeLess');\n      this.includeSass = hasFeature('includeSass');\n      this.includeCss = hasFeature('includeCss');\n\n      this.includeJade = hasFeature('includeJade');\n      this.includeHtml = hasFeature('includeHtml');\n\n      this.includeBootstrap = hasFeature('includeBootstrap');\n      this.includeUIBootstrap = hasFeature('includeUIBootstrap');\n      this.includeUIRouter = hasFeature('includeUIRouter');\n\n      done();\n    }.bind(this));\n  },\n  configuring: function () {\n    this.config.set({\n      projectName: this.appname,\n      coffee: this.includeCoffeeScript,\n      jade: this.includeJade,\n      sass: this.includeSass,\n      bootstrap: this.includeBootstrap,\n      uiBootstrap: this.includeUIBootstrap,\n      uiRouter: this.includeUIRouter\n    });\n\n    this.copy('editorconfig', '.editorconfig');\n    this.copy('jshintrc', '.jshintrc');\n    this.copy('gitignore', '.gitignore');\n    if (this.includeCoffeeScript) {\n      this.copy('_coffeelint.json', 'coffeelint.json');\n    } else if (this.includeTypeScript) {\n      this.copy('_tslint.json', 'tslint.json');\n    }\n  },\n  writing: {\n    writeGulp: function () {\n      this.copy('_gulpfile.js', 'gulpfile.js');\n      this.directory('gulp', 'gulp');\n    },\n    writeBower: function () {\n      var bower = {\n        name: this.appname,\n        private: true,\n        dependencies: {\n          angular: '~1.2.21'\n        }\n      };\n      if (this.includeBootstrap) bower.dependencies['bootstrap'+(this.includeSass ? '-sass-official' : '')] = '~3.2.0';\n      if (this.includeUIBootstrap) bower.dependencies['angular-bootstrap'] = '~0.11.0';\n      if (this.includeUIRouter) {\n        bower.dependencies['angular-ui-router'] = '~0.2.10';\n      } else {\n        bower.dependencies['angular-route'] = '~1.2.21';\n      }\n      this.write('bower.json', JSON.stringify(bower, null, 2));\n    },\n    writePackage: function () {\n      this.copy('_package.json', 'package.json');\n    },\n    writeAssets: function () {\n      this.directory('src/assets', 'src/assets');\n      this.mkdir('src/assets/fonts');\n    },\n    writeModules: function () {\n      var language = {folderName: 'javascript'};\n      if (this.includeCoffeeScript) {\n        language = {folderName: 'coffeescript'};\n      } else if (this.includeTypeScript) {\n        language = {folderName: 'typescript'};\n      }\n      this.directory('src/modules/'+language.folderName, 'src/modules');\n\n      var templateEngine = {folderName: 'html', extension: '.html'};\n      if (this.includeJade) {\n        templateEngine = {folderName: 'jade', extension: '.jade'};\n      }\n      this.copy('src/templates/'+templateEngine.folderName+'/index'+templateEngine.extension, 'src/index'+templateEngine.extension);\n      this.copy('src/templates/'+templateEngine.folderName+'/layout'+templateEngine.extension, 'src/modules/app/foo/layout'+templateEngine.extension);\n\n    },\n    writeStyles: function () {\n      var preprocessor = {folderName: 'css'};\n      if (this.includeSass) {\n        preprocessor = {folderName: 'sass'};\n      } else if (this.includeLess) {\n        preprocessor = {folderName: 'less'};\n      }\n      this.directory('src/styles/'+preprocessor.folderName, 'src/styles');\n\n    }\n  },\n  install: function () {\n    if (this.options['skip-install']) {\n      this.log('To finish the installation, run `'+chalk.blue('bower install && npm install')+'`');\n    } else {\n      this.installDependencies();\n    }\n  },\n  end: function () {\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angulpify/node_modules/generator-angulpify/generators/app/templates/_gulpfile.js":"require('./gulp');","/home/travis/build/npmtest/node-npmtest-generator-angulpify/node_modules/generator-angulpify/generators/app/templates/gulp/index.js":"'use strict';\n\nvar fs = require('fs'),\n  argv = require('yargs').argv,\n  tasks = fs.readdirSync('./gulp/tasks/');\n\nrequire('./config');\n\n// --release flag when executing a task\nglobal.release = argv.release;\n\ntasks.forEach(function (task) {\n  require('./tasks/' + task);\n});\n"}